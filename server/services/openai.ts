// server/services/openai.ts
import OpenAI from "openai";
import { OpenAIConfig, ResearchQuery, ResearchResult } from "../types/index.js";

export class OpenAIService {
  private client: OpenAI;
  private config: OpenAIConfig;

  constructor(config: OpenAIConfig) {
    this.config = config;
    this.client = new OpenAI({
      apiKey: config.apiKey,
    });
  }

  async generateResearch(query: ResearchQuery): Promise<ResearchResult> {
    try {
      console.log(`üß† Starting OpenAI deep research for: "${query.query}"`);

      // Use OpenAI Responses API with deep research model
      const response = await this.client.responses.create({
        model: "o4-mini-deep-research",
        input: [
          {
            role: "developer",
            content: [
              {
                type: "input_text",
                text: "You are a research assistant. Conduct thorough research and provide comprehensive findings that can be used to create detailed GitHub issues or project documentation.",
              },
            ],
          },
          {
            role: "user",
            content: [
              {
                type: "input_text",
                text: query.query,
              },
            ],
          },
        ],
        tools: [
          {
            type: "web_search_preview",
            search_context_size: "medium",
          },
        ],
        reasoning: {
          summary: "auto",
        },
      });

      // Extract the research findings
      const findings =
        response.output_text || "Research completed successfully";

      const result: ResearchResult = {
        id: `research_${Date.now()}`,
        query: query.query,
        findings: findings,
        actions: [],
        timestamp: new Date().toISOString(),
        status: "completed",
      };

      console.log(`‚úÖ OpenAI research completed for query: ${query.query}`);
      return result;
    } catch (error) {
      console.error("‚ùå OpenAI research failed:", error);

      // Return a failed result with error info
      const failedResult: ResearchResult = {
        id: `research_error_${Date.now()}`,
        query: query.query,
        findings: `Research failed: ${
          error instanceof Error ? error.message : "Unknown error"
        }`,
        actions: [],
        timestamp: new Date().toISOString(),
        status: "failed",
      };

      return failedResult;
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      const response = await this.client.models.list();
      console.log("‚úÖ OpenAI API connection successful");
      return true;
    } catch (error) {
      console.error("‚ùå OpenAI API connection failed:", error);
      return false;
    }
  }

  // Helper method to extract key insights for GitHub issues
  async generateGitHubIssueContent(
    researchFindings: string,
    originalQuery: string
  ): Promise<{
    title: string;
    body: string;
  }> {
    try {
      const response = await this.client.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content:
              "You are an expert at creating well-structured GitHub issues. Format research findings into a clear, actionable GitHub issue with a concise title and detailed body with proper markdown formatting.",
          },
          {
            role: "user",
            content: `Based on this research query: "${originalQuery}"

And these research findings:
${researchFindings}

Create a GitHub issue with:
1. A clear, actionable title (max 80 characters)
2. A detailed body with:
   - Summary of the research
   - Key findings (use bullet points)
   - Suggested next steps or action items
   - Proper markdown formatting

Respond in JSON format with "title" and "body" fields.`,
          },
        ],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || "{}");

      return {
        title: result.title || `Research: ${originalQuery}`,
        body:
          result.body ||
          `## Research Findings\n\n${researchFindings}\n\n## Next Steps\n\n- [ ] Review findings\n- [ ] Plan implementation`,
      };
    } catch (error) {
      console.error("Error generating GitHub issue content:", error);

      // Fallback formatting
      return {
        title: `Research: ${originalQuery.slice(0, 60)}${
          originalQuery.length > 60 ? "..." : ""
        }`,
        body: `## Research Query\n\n${originalQuery}\n\n## Findings\n\n${researchFindings}\n\n## Generated by Smart Research Assistant\n\nCreated automatically from AI research using OpenAI deep research models and Pica MCP integration.`,
      };
    }
  }
}

// Factory function for creating OpenAI service
export function createOpenAIService(): OpenAIService {
  const apiKey = process.env.OPENAI_API_KEY;

  if (!apiKey) {
    throw new Error("OPENAI_API_KEY environment variable is required");
  }

  const config: OpenAIConfig = {
    apiKey,
    model: "o4-mini-deep-research",
    maxTokens: 8000,
  };

  return new OpenAIService(config);
}
